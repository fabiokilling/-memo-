expected an indented block缩进报错
invalid character in identifier中英文报错

lower()小写
upper()大写

C:\ProgramData\Anaconda3
C:\Users\ArcherX\AppData\Local\Programs\Python\Python36



Google分布式 MapReduce
https://www.cnblogs.com/fuzhe1989/p/3413457.html
MapReduce库是为了帮助使用成百上千台机器处理数量非常大的数据的，它必须能够优雅地承受机器错误


print("%.2f"%变量名）
换行 \n
制表符\t (八格)



运行时报错：AttributeError: module 'urllib' has no attribute 'urlopen'
在网上查了一些资料，有人说是因为你的这个工程目录下可能有一个自己定义的文件与urllib重名，导致上述代码在引用时实际引用的是自定义的那个urllib，
结果查找自己的项目文件夹下也没有重名的文件。其实真正原因是在Python3.X中应该用urllib.request。更改后就不会再出现这个错误了。
import urllib.request
file = urllib.request.urlopen('http://helloworldbook.com/data/message.txt')
message = file.read()
print(message)


default默认

python里怎么终止程序的执行？
import sys
sys.exit(0)
Or you can use:
raise SystemExit
If you are using IDLE:
just use "quit()"


sort()改变元列表，sorted()不改变
内置              全局
L.sort()=       ,     =sorted()
reverse逆置
tuple元组不可改变


split(",")   代表以,为分隔符分解字符串
name_string = "Sam,Brad,Alex,Cameron,Toby,Gwen,Jenn,Connor"
name = name_string.split(',')
for name in name:
    print(name)
strip是删除的意思；而split则是分割的意思
strip能删除首尾的
声明：s为字符串，rm为要删除的字符序列
s.strip(rm)       删除s字符串中开头、结尾处，位于 rm删除序列的字符
s.lstrip(rm)      删除s字符串中开头处，位于 rm删除序列的字符
s.rstrip(rm)     删除s字符串中结尾处，位于 rm删除序列的字符


使用print写文件
以写模式'w'或者追加模式"a"打开文件,打开文件后使用print写文件，like this:
my_file = open("new_file.txt", 'w')
print >> my_file, "Hello there, neighbor!"
my_file.close()
这里的两个>符号，有时称为山形符号，告诉print要把它的输出发送到一个文件中
而不是屏幕上，则成为重定向(redirecting)输出。
有时使用print比write()更方便，因为print还会额外完成一些工作，比如把数字自动转换为字符串等。
如果要在文件中放入文本，你可以使用print，也可以使用write()。



正则 
^表示行的开头，^\d表示必须以数字开头。
$表示行的结束，\d$表示必须以数字结束。
你可能注意到了，py也可以匹配'python'，但是加上^py$就变成了整行匹配，就只能匹配'py'了。
.可以匹配任意字符，所以：
'py.'可以匹配'pyc'、'pyo'、'py!'等等。
用\d可以匹配一个数字，\w可以匹配一个字母或数字
\s匹配空格
来看一个复杂的例子：\d{3}\s+\d{3,8}。
我们来从左到右解读一下：
\d{3}表示匹配3个数字，例如'010'；
\s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，' '等；
\d{3,8}表示3-8个数字，例如'1234567'。
综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。
如果要匹配'010-12345'这样的号码呢？由于'-'是特殊字符，在正则表达式中，要用'\'转义，所以，上面的正则是\d{3}\-\d{3,8}。
但是，仍然无法匹配'010 - 12345'，因为带有空格。所以我们需要更复杂的匹配方式。



储存一个list
使用pickle，将列表储存在文件中:
import pickle
my_list = ['Fred', 73, 'Hello there', 81.9876e-13]
pickle_file = open('my_pickled_list.pkl', 'wb')
pickle.dump(my_list, pickle_file)
pickle_file.close()
还原
使用load(),为这个函数提供一个文件对象(对应包含被pickle了的文件)，它会按照原来的格式返回数据：
import pickle
pickle_file = open('my_pickled_list.pkl', 'rb')
recovered_list = pickled.load(pickle_file)
pickle_file.close()

print(recovered_list)
(上面"w"和"r"后都加了b，因为pickle存储方式默认是二进制方式,不用二进制方式打开就会报错，所以后面加上"b")

怎样最大程度用CPU，提高程序运行速度？
https://www.zhihu.com/question/38609486

Python中的GIL、多进程和多线程
http://www.cnblogs.com/codefish/p/4961963.html




读取输入
import sys
a = sys.argv[1]

